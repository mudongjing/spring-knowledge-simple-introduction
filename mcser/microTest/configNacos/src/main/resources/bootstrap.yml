spring:
  application:
    name: 
  cloud:
    nacos:
      server-addr: ip:端口
      # 此时开启权限控制，必须写上用户名和密码
      username:
      password: 
      config:
        namespace: 
        file-extension: yaml
        group:  # 读取配置所对应的组
#        shared-configs: # 读取共享的配置文件，是一个数组类型
#          - data-id: # 对应配置的文件名
#            group: # 对应的组名
#            refresh: true # 动态感知
        # 这种共享文件对应的配置文件的优先级是比较低的
        # 共享配置文件内，下标越大，优先级也越大，即后来的会覆盖之前的
        # 与shared-configs 类似的
        # extension-configs:
        # extension的配置文件的优先级也是大于shared的文件
        # 这几种配置文件的使用可参考这样的示例
        # 我们作为一个电商公司，平常的运行环境中，各个机器保证较低成本的运行即可，公司有一个统一的标准
        # 该标准就放在了shared的文件中，供公司所有部门进行使用
        # 但是如果遇到一些促销活动，需要我们调高一下自己机器的运行效率，此时，相当于公司实现准备了一个应急方案一样
        # 我们使用指定的extension文件，将覆盖一部分之前shared的配置，以适应促销
        # 但是，除此之外，一个大公司，不同的部门也有着不同的要求
        #比如普通的一些线上任务，如一些简单的积分任务或小游戏之类的，可以不要求那么强的事务一致性和并发性能
        # 而对于一些重要的，如订单的发布，交易金额的增减，都要求不能出现差错，宁可花费较大的成本，也要保证准确无误
        # 这就需要各部门根据需要自自定义自己的默认配置文件
        refresh-enabled: true

